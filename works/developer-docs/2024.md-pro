# 2024工作记录

##### 1. [插件库](https://nccdev.yonyou.com/ide/idea/latest/updatePlugin.xml ) _Reference:_*https://nccdev.yonyou.com/ide/idea/latest/updatePlugin.xml*

##### 2. [OpenAPI超时设置](https://nccdev.yonyou.com/article/detail/1532)_Reference:_*https://nccdev.yonyou.com/ide/idea/latest/updatePlugin.xml*

##### 3. [前端脚手架设置](https://nccdev.yonyou.com/article/detail/1625)_Reference:_*https://nccdev.yonyou.com/article/detail/1625*

##### 4. _2207 BIP 高级版IDEA启动 常见异常_

```java
Component: nc.bs.framework.session.IClusterSessionManager,Detail Message: The tx component: nc.bs.framework.session.IClusterSessionManager is not found in jndi please deploy it!} jndiName: nc.bs.framework.session.IClusterSessionManager meta: null
```

> *解决方案：直接删除../home/bin目录下的lincese文件即可*

##### 6. 操作记录

>*上机日志可以查询谁登陆、业务日志查询谁操作了*
>
>系统监视器解除PK锁与登陆用户信息 

##### 7. [密码加密相关代码](https://nccdev.yonyou.com/article/detail/1625) _Reference:_ *ResetPswAction.java*

```java
String cuserId = ((JSONObject)((JSONArray)((JSONObject)returnJson.get("data")).get("result")).get(0)).getString("cuserid");
	UserVO userVO = (UserVO)NCLocator.getInstance().lookup(IUAPQueryBS.class).retrieveByPK(UserVO.class, cuserId);
//IUserManageQuery qryService = (IUserManageQuery)NCLocator.getInstance().lookup(IUserManageQuery.class.getName());
//UserVO userVO = qryService.findUserByCode(user.getUser_code_q(), dsName);
String dsName = InvocationInfoProxy.getInstance().getUserDataSource();
String userActualCodecPwd = null;
if (userVO != null) {
	userActualCodecPwd = userVO.getUser_password();
}
String encodedPassword = this.getEncodedPassword(userVO, "123wewe");

//String newPwd = RbacUserPwdUtil.getEncodedPassword(userVO, expresslyPwd);
IRSAService service = (IRSAService) ServiceLocator.find(IRSAService.class);
String plaintextCipher = service.decryptStringForNewPadding(userActualCodecPwd);
//修改密码
//IUserPasswordManageForUnlogin  getIUserPasswordManageForUnlogin = (IUserPasswordManageForUnlogin)ServiceLocator.find(IUserPasswordManageForUnlogin.class);

//getIUserPasswordManageForUnlogin.changeUserPassWord(oldUser, newpsw, dsName);

System.err.println(plaintextCipher);

String newPwd = RbacUserPwdUtil.getEncodedPassword(userVO, expresslyPwd);
```

![image-20240520112459998](https://raw.githubusercontent.com/zbsilent/imag/main/img/2024/image-20240520112459998.png)

![image-20240520112518666](https://raw.githubusercontent.com/zbsilent/imag/main/img/2024/image-20240520112518666.png)

![image-20240520112532118](https://raw.githubusercontent.com/zbsilent/imag/main/img/2024/image-20240520112532118-20240520112722707.png)



##### 8. 单点登录
```java
nccloud.web.baseapp.login.ThirdPartyLoginVerfiyAction// 单点登录的前后端交互接口
```
##### 9. [数据库持久化操作](https://nccdev.yonyou.com/article/detail/1076#) _Reference:_*https://nccdev.yonyou.com/article/detail/1076#*
##### 10. [数据库表锁行解决方案]()
```sql
select  o.object_name,  s.sid,  s.serial#,  p.spid, s.username,s.program
from v$locked_object l
join dba_objects o on l.object_id = o.object_id
join v$session s on l.session_id = s.sid
left join v$process p on p.addr = s.paddr;

select  'alter system kill session '''||sid||','||serial#||',@1'' immediate;'  from gv$session where sid in(select distinct session_id from gv$locked_object) and  inst_id=1
union all
select  'alter system kill session '''||sid||','||serial#||',@2'' immediate;'  from gv$session
where sid in(select distinct session_id from gv$locked_object) and  inst_id=2;
```
##### 11. [如何访问linux服务器？ 并使用sqlplus访问数据库]()
```shell
# ssh 账号@服务器地址
-> 提示输入密码 

-> 登录后 执行 su - oracle
# sqlplus db_code/db_pwd@sid
```

##### 12. [Mac 查询命令]() _Reference:_*Mac 查询命令  find . -name "*.java"*
##### 13. 日志说明

:::tip
am-log：系统管理升级日志</br>
fw-log：IOC容器框架日志</br>
pa-log：预警平台日志</br>
pfxx-log：外部交换平台的日志</br>
portal-log：Portal日志</br>
wf-log：流程平台日志</br>
userpower-log：权限升级日志</br>
iufo-log：iufo日志</br>
annoy-log：业务日志，如果没有配置模块，日志写在该文件中。</br>
nc-log：所有的错误日志，这是系统的主日志系统</br>
sql-log.log：sql日志。一般不用设置为DEBUG级别。 调试时再设置。</br>
mwsummary-log：性能概要日志</br>
openapi-log.log: openapi日志文件</br>
:::

##### 14. [OpenAPI如何测试](https://nccdev.yonyou.com/article/detail/197)_Reference:_*https://nccdev.yonyou.com/article/detail/197*
##### 16. 高级版修改超级用户root密码

1. <font color="red">_如果忘记了root密码怎么办？ncc root用户密码存在sm_super_user表中。先改表结构允许password字段为空。_</font>

```sql
alter table sm_super_user modify (password null);
```
2. <font color="red">_把root密码清空_</font>

```sql
update sm_super_user set password='' where admcode='root';
commit;
```
3. <font color="red">_root登录系统，输入新密码，修改回原来的表结构：_</font>
```sql
alter table sm_super_user modify (password not null);
```
##### 17. R2升级R5注意以下说明 :100:
:::warning
R2升级到R5后，在应用构建里面导出 javaPOJO，download.zip 文件报错</br>
多个项目遇到了，应该比较普遍，可以打如下补丁尝试解决</br>
后端补丁：iuap-tempdisk2_iuap-metadata-designer_iuap.V6.R5_2312_10_QP20240311-1</br>
前端补丁：sPaaS_iuap-metadata-designer-fe_iuap.V6.R5_2312_279_QP20240305-2</br>
:::

##### 18. [前后端获取环境变量]()

_`前端`_

```js
import {getBusinessInfo} from 'nc-lightapp-front';
let businessInfo = getBusinessInfo(); //获取用户信息
let userInfo = JSON.parse(localStorage.getItem('STOREFORINFODATA')); // 获取用户信息
const { userId, bizDateTime, groupVOs } = userInfo;
```

_`后端`_

```java
//获取当前系统登录集团 
InvocationInfoProxy.getInstance().getGroupId()
//获取当前系统登录用户
InvocationInfoProxy.getInstance().getUserId()
//获取当前用户编码  
WorkbenchEnvironment.getInstance().getLoginUser() .getUser_code()
//获取当前系统时间  
new UFDateTime(System.currentTimeMillis())
//clent端获取登录用户VO 
UserVO user = WorkbenchEnvironment.getInstance().getLoginUser();
//数据源获取和修改
// 获取数据源
String oldDataSourceName = InvocationInfoProxy.getInstance().getUserDataSource();
// 设置新的数据源 
InvocationInfoProxy.getInstance().setUserDataSource("数据源");
//参照设置设置参照多选
((UIRefPane)editor.getBillCardPanel().getHeadItem("vpsn").getComponent()).setMultiSelectedEnabled(true);
//动态指定参照类：
((UIRefPane)(getBillCardPanelWrapper().getBillCardPanel().getHeadItem("段").getComponent())).setRefModel(参照类.class);
//表头参照多选取值:
((UIRefPane) billCardPanel.getHeadItem("hzdy41").getComponent()).getRefModel().getPkValues();
//home 路径获取
RuntimeEnv.getInstance().getNCHome();
//刷新调用
nc.ui.pubapp.uif2app.actions.RefreshSingleAction refreshaction=new RefreshSingleAction();
refreshaction.doAction(e1);
//根据cuserid，明文密码校验
Boolean flag =RbacUserPwdUtil.checkUserPassword(user, oldpwd2);//根据cuserid，明文密码校验
//根据明文密码和UserVO修改密码
IUserPasswordManage mange = NCLocator.getInstance().lookup(IUserPasswordManage.class);
mange.changeUserPassWord(user, newpwd);
```
##### 19. [NC65其他开发技巧可以参考](https://mp.weixin.qq.com/s/rTVPFnZZhZ_-MHggbSYVNg) 

##### 20. 流程平台动作处理接口(实现新增，删除，签字，审批，弃审)
```java
IPFBusiAction ifbaction = null;
private IPFBusiAction getIPFBsiAction(){
if(ifbaction == null){
ifbaction = NCLocator.getInstance().lookup(IPFBusiAction.class);

}
return ifbaction;
}
//destBill是aggvo
SapplyBillVO[] obj= (SapplyBillVO[]) getIPFBsiAction().processAction("WRITE", "4455", null, destBill, null, null);
```
##### 21. 刷新调用
```java	
nc.ui.pubapp.uif2app.actions.RefreshSingleAction refreshaction=new RefreshSingleAction();
refreshaction.doAction(e1);
```
##### 22. 根据id查询sm_user表的vo
```java
IUserManageQuery userQry = NCLocator.getInstance().lookup(IUserManageQuery.class);
UserVO user = userQry.getUser(cuserid);
```
##### 23. 提交和审批会走的地方
```java
nc.bs.pub.taskmanager.TaskManagerDMO
public void insertWorkitemsOfTask(String[] userIds, WFTask task, IWorkitemDistributor… dists)
```
##### 24. 根据条件控制按钮是否可操作性
```java
//按钮的Action中，继承NCAction并重写isActionEnable方法是控制按钮是否可操作的方法，默认返回true（可以操作）
@Override
protected boolean isActionEnable() {return true}
//----------------------------------------------------------------------
//点击新增，自动增行（在新增事件--addhandler实现implements IAppEventHandler<AddEvent>）
public void handleAppEvent(AddEvent e) {
    BillCardPanel panel = e.getBillForm().getBillCardPanel();
    Action action = panel.getBodyPanel().getBillTableAction(0);
    if (action instanceof AbstractBodyTableExtendAction) {
       AbstractBodyTableExtendAction addAction = (AbstractBodyTableExtendAction)action;
       ActionEvent ae = null;
       ae = new ActionEvent(panel.getBodyPanel().getTable(), 1234, "AutoLine");
       addAction.actionPerformed(ae);
    }
}
```
##### 25. [自定义档案编码和名称的唯一性校验]()

:::tip
可以在[基础数据管控模式]节点，配置规则，如果无法新增规则，可在数据库中插入数据</br>
select * from bd_uniquerule ;</br>
select * from bd_uniquerule_item;</br>
可以在[基础数据管控模式]节点中新增一条规则点击保存后，然后在此方法中进行断点调试，获取需要插入的VO信息</br>
nc.impl.bd.config.uniquerule.BDUniqueruleManageServiceImpl.insert(BDUniqueruleVO)</br>
:::

##### 26. [根据BillCardPanel获取界面参照类型字段并设置是否可多选]()
```java
BillItem item = e.getBillCardPanel().getBodyItem(e.getKey());
 if (item == null)
    return;
 JComponent componen = item.getComponent();
 if (componen instanceof UIRefPane){
    UIRefPane refPane = (UIRefPane) componen;
    refPane.setMultiSelectedEnabled(true);
 }
```
##### 27. [获取参照的值]()
```java
UIRefPane measdocRef = (UIRefPane) getBillCardPanel().getHeadItem(MaterialVO.PK_MEASDOC).getComponent();
measdocRef.getRefPK(); //主键 
measdocRef.getRefName(); //名称
measdocRef.getRefCode(); //编码
```
##### 28. [参照过滤条件]()
```java
//可以添加在编辑前事件中
UIRefPane refPane=(UIRefPane)billForm.getBillCardPanel().getHeadItem("def2").getComponent();
AbstractRefModel refModel=(AbstractRefModel) refPane.getRefModel();
String wherePart=" and def5='1001H2100000004MJ7SV' ";//Sql以and开头
refModel.addWherePart(wherePart, false);//第二个参数为是否刷新该数据
refPane.setMultiCorpRef(false);//设置不能跨组织
```
##### 29. [参照选择后显示主键或编码，不显示名称]()
- 进入单据模板初始化节点，选择对应节点的模板并点击修改
- 进入节点模板，点击要显示名称的参照字段，在左侧界面选择高级属性
- 选中‘类型设置’行，双击值的位置会有一个参照按钮，点击参照会弹出一个界面
- 在界面中勾选‘焦点离开后显示名称’

##### 30. [根据cuserid，明文密码校验]()
```java
Boolean flag =RbacUserPwdUtil.checkUserPassword(user, oldpwd2);//根据cuserid，明文密码校验
```
##### 31. [根据明文密码和UserVO修改密码]()
```java
IUserPasswordManage mange = NCLocator.getInstance().lookup(IUserPasswordManage.class);
mange.changeUserPassWord(user, newpwd);
```
##### 32. [NC单据每次提交必走的地方]()
```java
nc.bs.pub.taskmanager.TaskManagerDMO.insertWorkitemsOfTask
```
##### 33. WorkflownoteVO 会有你要的数据
:::danger
WorkflownoteVO 会有你要的数据
:::
##### 34. 工作流查询接口
```java		
//工作流查询接口
FlowHistoryQryResult result = NCLocator .getInstance().lookup(IPFWorkflowQry.class).queryFlowHistoryQryResult(billtype, billid, 2);
MessageMetaVO[] metavos = result.getMessageMetaVOs();
```
##### 35. 提交和审批会走的地方
```java
nc.bs.pub.taskmanager.TaskManagerDMO
public void insertWorkitemsOfTask(String[] userIds, WFTask task, IWorkitemDistributor... dists)
```

##### 36. 单据模板打印
<font color="red">_模板打印的入口类:_</font>  `nc.ui.pub.print.PrintEntry`</br>	
<font color="red">_实现模板打印一般分三个步骤：_</font> 

1. 设置模板 
2. 设置数据源 
3. 打印或预览或输出到Excel 

```java
例一：普通打印
//实现数据源
nc.ui.pub.print.IDataSource dataSource = new MyDataSource();
// 实例化打印入口
PrintEntry print = new PrintEntry(parent, dataSource);
// 根据公司、节点编号、操作员、业务类型加载满足条件的打印模板
print.setTemplateID(String pkCorp, String funNode, String operator, String pkBusiType);
// 在满足条件的模板中选择一个打印模板, 返回值 < 0 表示用户取消打印或读取模板错误
print.selectTemplate();
// 有下面几种输出方式
print.preview();   //预览,在预览界面也可以打印
print.print(); //直接打印
print.exportExcelFile(); //输出到Excel
print.exportPdfFile();// 输出到pdf
```
```java
例二：批量打印: 批量打印是指用同一个模板对一批数据源进行打印.批量打印不进行预览直接进行打印. 批量打印支持输出到excel.
// 实例化打印入口,parent是父窗口容器
PrintEntry print = new PrintEntry(parent);
// 根据公司、节点编号、操作员、业务类型加载满足条件的打印模板
print.setTemplateID(String pkCorp, String funNode, String operator, String pkBusiType);//加载打印模板
// 在满足条件的模板中选择一个打印模板,返回值<0表示用户取消打印或读取模板错误
print.selectTemplate();
// 进入批量打印准备状态,此时选择是输出到打印机还是Excel
print.beginBatchPrint();
// 向打印入口对象中加入数据源，形成批量数据
for (int i = 0; i < data_source_count; i++) {
  print.setDataSource(data_source[i]);
}
// 数据源加入完成,结束批量打印准备状态,开始实际的打印处理
print.endBatchPrint();
注：批量打印从5011开始无需在开始和结束的时候调用beginBatchPrint()和endBatchPrint()方法，直接调用相应的输出方法即可。
PrintEntry print = new PrintEntry(parent);
print.setTemplateID(String pkCorp, String funNode, String operator, String pkBusiType);//加载打印模板
print.selectTemplate();
for (int i = 0; i < data_source_count; i++) {
 print.setDataSource(data_source[i]);
}
print.preview();
```
:::tip
PrintEntry是打印对外服务的入口, 它的接口设计原则是简单：通过简单的调用即可完成打印功能. 其内部实现(都是缺省实现)被完全封装,对外部不可见.
PrintEntry依赖四个各司其职的 接口(对这些接口都进行了缺省实现,外部不用关心.):

- 数据源组织器(IDataSourceOrganizer)
- 打印模板数据存取器(IPrintDataAccessor)
- 打印数据解析器(AbstractTemplateParser)
- 打印任务(AbstractTemplateOutputTask)


如果二次开发或者产品组对与上面四个接口有特殊的实现,请使用TemplateOutputTaskBuilder类构建打印任务.
:::


##### 37. YONBIP资料监控中心(YMC)培训资料
:::details
>[YMC产品核心价值介绍:https://docs.yonyoucloud.com/l/F779a662C1D8](https://docs.yonyoucloud.com/l/F779a662C1D8) </br>
>[YMC-UBA用户洞察介绍: https://docs.yonyoucloud.com/l/3c567c5aaca6]( https://docs.yonyoucloud.com/l/3c567c5aaca6) </br>
>[采集的前端数据:https://docs.yonyoucloud.com/l/4F1aF6190404](https://docs.yonyoucloud.com/l/4F1aF6190404 )</br>
>[用友大型企业混合云客户成功服务产品-YonIMP智能监控平台.pptx:https://docs.yonyoucloud.com/l/DfAd92b91d36 ](https://docs.yonyoucloud.com/l/DfAd92b91d36)</br>
>[YMC 使用案例:https://docs.yonyoucloud.com/l/Fc8414DC64c3](https://docs.yonyoucloud.com/l/Fc8414DC64c3)</br>
>[YMC APP实时全链路移动版(1).pdf:https://docs.yonyoucloud.com/l/B696edb5A596](https://docs.yonyoucloud.com/l/B696edb5A596)</br>
>[实时统计YMC Robot基于YMC性能数据+专家经验:https://docs.yonyoucloud.com/l/199c8B35726F ](https://docs.yonyoucloud.com/l/199c8B35726F )
:::

##### 38. 其他记录
:::details
>[所有动作类的基类:nccloud.framework.web.action.itf.ICommonAction](nccloud.framework.web.action.itf.ICommonAction)
>[上传附件的Action:nccloud.web.platform.attachment.action.AttachmentUpLoadAction](nccloud.web.platform.attachment.action.AttachmentUpLoadAction)
>[上传附件的通用地址:http://127.0.0.1:3006/nccloud/platform/attachment/upload.do](http://127.0.0.1:3006/nccloud/platform/attachment/upload.do)
>[查询附件的:nccloud.web.platform.attachment.action.AttachmentQueryAction](nccloud.web.platform.attachment.action.AttachmentQueryAction)
>[数据库写入附件信息:nc.impl.pub.filesystem.FileSpaceDAO.insertCloudNCFileVO](nc.impl.pub.filesystem.FileSpaceDAO.insertCloudNCFileVO) 
:::

##### 39. [源代码申请 ](https://nccdev.yonyou.com/article/detail/1388 )

##### 40. [元数据调整](https://nccdev.yonyou.com/article/detail/765)

:::details
>md_module 元数据所属模块信息 
> id<Undefined>
>md_component 存放模块下的组件的元数据信息 
> id<Undefined>、namespace<Undefined>
>md_association 存放元数据的连接线信息 
> id<Undefined>、startelementid<Undefined>、endelementid<Undefined>、componentid<Undefined>
>md_class 存放元数据下的实体信息，如主子实体 
> id<Undefined>、componentId<Undefined>、defaulttablename 
>md_property 存放元数据的实体属性和长度信息 
> id<Undefined>、classid<Undefined>
>md_bizitfmap 存放元数据实体和业务接口属性映射关系 
> id<Undefined>、classid<Undefined>
>md_ormap 存放元数据实体属性和生成的sql数据库表字段对应关系 
> id<Undefined>、classid<Undefined>
>md_accessorpara 存放聚合类ID和聚合类的全类名信息 
> id<Undefined>、paravalue<Undefined>
>md_table 存放元数据表的创建信息 
> id<Undefined>、displayname<Undefined>
>md_column 存放元数据表的列信息 
> id<Undefined>、tableid<Undefined>

```sql
--md_module与md_component的关联
select mcn.ts,mcn.name,mcn.namespace,
       mm.id,
       mcn.*
from md_component mcn 
left join md_module mm on mcn.namespace=mm.id
where mcn.namespace= 'hrpub'

 

--md_component与md_association、md_class的关联
select mc.ts,mc.displayname,mc.componentid,
       maa.name,maa.componentid,
       mcn.name,mcn.displayname,mcn.id,
       mc.*
from md_class mc
left join md_association maa on mc.componentid=maa.componentid
left join md_component mcn on mc.componentid=mcn.id
where mc.defaulttablename='bd_psnjob'


--md_class与md_property、md_bizitfmap、md_ormap、md_accessorpara的关联
select 
      mpp.ts,mpp.name,mpp.id,
      mbm.classattrid,mbm.intattrid,
      mo.attributeid,mo.columnid,
      mc.displayname,mc.id,
      map.paravalue,map.id,map.assosequence,
      mpp.*
from md_property mpp 
left join md_bizitfmap mbm on mpp.id=mbm.classattrid
left join md_ormap mo on mpp.id=mo.attributeid
left join md_class mc on mpp.classid=mc.id
left join md_accessorpara map on mc.id=map.id
where mc.defaulttablename='bd_psnjob'


--md_class与md_table的关联
select mc.ts,mc.displayname,mc.id,mc.defaulttablename,
       mt.id
from md_class mc
left join md_table mt on mc.defaulttablename=mt.id
where mc.defaulttablename='bd_psnjob'


--md_table与md_column的关联
select mcl.ts,mcl.name,mcl.tableid,mt.displayname,
       mt.id,
       mcl.*
from md_column mcl
left join md_table mt on mcl.tableid=mt.id
where mcl.tableid='bd_psnjob'
```
:::

##### 41. 低代码生成的sql

>1 、appregister
>>sm_appregister（应用注册）
>>sm_apppage（应用页面）
>>sm_appbutnregister（应用按钮注册实体）
>
>2、 billtype
>>bd_billtype（单据/交易类型）
>>pub_billaction（单据动作）
>>pub_busiclass（业务处理实体类）
>>bd_relatedapp（关联的小应用）
>
>3 、business
>>bd_refinfo（参照信息）
>
>4、 dbcreate（建表）
>5 、dbml（多语）
>6、 menuitemreg
>>sm_appmenuitem（应用菜单项注册）
>
>7、 pagetemplet
>>pub_page_templet（页面模板）
>>pub_area（区域）
>>pub_query_property（查询区字段/属性）
>>pub_form_property（表单字段属性）

##### 42. [前端参照自定义过滤](https://nccdev.yonyou.com/article/detail/565)

::: tip
TreeRefActionExt（树型参照后端自定义过滤扩展属性）</br>
GridRefActionExt（表型参照后端自定义过滤扩展属性）
:::

##### 43. VPN异常解决方案

:::danger

_<font color="red">出现此错误提示信息的主要原因是:</font>_ _MacOS系统禁止了iNode进程启动_ </br>
_<font color="red">解决方案及步骤如下:</font>_

<font color="dodgerblue">1. 打开终端控制台，输入如下命令：</font></br>

```shell
ps -ef | grep iNode
```
![image-20240520133249478](/Users/zbsilent/Library/Application%20Support/typora-user-images/image-20240520133249478.png)

<font color="dodgerblue">2. 查看是否有iNodeMon进程，如果没有此进程则输入如下命令拉起</font></br>
```shell
sudo /Applications/iNodeClient/iNodeMon
```
<font color="dodgerblue">3. 如果有该进程，但是依然提示网关参数失败：重启iNode服务</font></br>
```shell
sudo /Applications/iNodeClient/StopService.sh
```
<font color="dodgerblue">4. sudo /Applications/iNodeClient/iNodeMon</font>
:::

##### 44. 常用COLOR颜色

:::details

古典白色:antiquewhite <font color="antiquewhite">古典白色</font></br>
浅绿色:aqua <font color="aqua">浅绿色</font></br>
碧绿色:aquamarine <font color="aquamarine">碧绿色</font></br>
天蓝色:azure <font color="azure">天蓝色</font></br>
米色:beige <font color="beige">米色</font></br>
桔黄色:bisque <font color="bisque">桔黄色</font></br>
黑色:black <font color="black">黑色</font></br>
白杏色:blanchedalmond <font color="blanchedalmond">白杏色</font></br>
蓝色:blue <font color="blue">蓝色</font></br>
蓝紫色:blueviolet <font color="blueviolet">蓝紫色</font></br>
褐色:brown <font color="brown">褐色</font></br>
实木色:burlywood <font color="burlywood">实木色</font></br>
刺桧蓝色:cadetblue <font color="cadetblue">刺桧蓝色</font></br>
亮黄绿色:chartreuse <font color="chartreuse">亮黄绿色</font></br>
巧克力色:chocolate <font color="chocolate">巧克力色</font></br>
珊瑚色:珊瑚色coral <font color="珊瑚色coral">珊瑚色</font></br>
矢车菊色:cornflowerblue <font color="cornflowerblue">矢车菊色</font></br>
谷丝色:cornsilk <font color="cornsilk">谷丝色</font></br>
深红色:crimson <font color="crimson">深红色</font></br>
蓝绿色:cyan <font color="cyan">蓝绿色</font></br>
深蓝色:darkblue <font color="darkblue">深蓝色</font></br>
深青色:darkcyan <font color="darkcyan">深青色</font></br>
深金杆色:darkgoldenrod <font color="darkgoldenrod">深金杆色</font></br>
深灰色:darkgray <font color="darkgray">深灰色</font></br>
深绿色:darkgreen <font color="darkgreen">深绿色</font></br>
深黄褐色:darkkhaki <font color="darkkhaki">深黄褐色</font></br>
深洋红色:darkmagenta <font color="darkmagenta">深洋红色</font></br>
深橄榄绿色:darkolivegreen <font color="darkolivegreen">深橄榄绿色</font></br>
深橙色:darkorange <font color="darkorange">深橙色</font></br>
深紫色:darkorchid <font color="darkorchid">深紫色</font></br>
深红色:darkred <font color="darkred">深红色</font></br>
深肉色:darksalmon <font color="darksalmon">深肉色</font></br>
深海绿色:darkseagreen <font color="darkseagreen">深海绿色</font></br>
深暗灰蓝色:darkslateblue <font color="darkslateblue">深暗灰蓝色</font></br>
深暗蓝灰色:darkslategray <font color="darkslategray">深暗蓝灰色</font></br>
深青绿色:darkturquoise <font color="darkturquoise">深青绿色</font></br>
深紫色:darkviolet <font color="darkviolet">深紫色</font></br>
深粉色:deeppink <font color="deeppink">深粉色</font></br>
深天蓝色:deepskyblue <font color="deepskyblue">深天蓝色</font></br>
暗灰色:dimgray <font color="dimgray">暗灰色</font></br>
遮板蓝色:dodgerblue <font color="dodgerblue">遮板蓝色</font></br>
砖色:firebrick <font color="firebrick">砖色</font></br>
花白色:floralwhite <font color="floralwhite">花白色</font></br>
葱绿色:forestgreen <font color="forestgreen">葱绿色</font></br>
紫红色:fushcia <font color="fushcia">紫红色</font></br>
庚斯博罗灰色:gainsboro <font color="gainsboro">庚斯博罗灰色</font></br>
幽灵白色:ghostwhite <font color="ghostwhite">幽灵白色</font></br>
金黄色:gold <font color="gold">金黄色</font></br>
金杆黄色:goldenrod <font color="goldenrod">金杆黄色</font></br>
灰色:gray <font color="gray">灰色</font></br>
绿色:green <font color="green">绿色</font></br>
绿黄色:greenyellow <font color="greenyellow">绿黄色</font></br>
蜜汁色:honeydew <font color="honeydew">蜜汁色</font></br>
亮粉色:hotpink <font color="hotpink">亮粉色</font></br></br>
印第安红色:indianred <font color="indianred">印第安红色</font></br>
靛青色:indigo <font color="indigo">靛青色</font></br>
象牙色:ivory <font color="ivory">象牙色</font></br>
黄褐色:khaki <font color="khaki">黄褐色</font></br>
淡紫色:lavender <font color="lavender">淡紫色</font></br>
浅紫红色:lavenderblush <font color="lavenderblush">浅紫红色</font></br>
草绿色:lawngreen <font color="lawngreen">草绿色</font></br>
柠檬纱色:lemonchiffon <font color="lemonchiffon">柠檬纱色</font></br>
浅蓝色:lightblue <font color="lightblue">浅蓝色</font></br>
浅珊瑚色:light coral <font color="light coral">浅珊瑚色</font></br>
浅金杆黄色:lightgoldenrodyellow <font color="lightgoldenrodyellow">浅金杆黄色</font>
:::

##### 45. GIT命令收集

![image-20240520140141229](https://raw.githubusercontent.com/zbsilent/imag/main/img/2024/image-20240520140141229.png)

##### 46. 删除git追踪文件，刷新git忽略文件 

:::details
1、 git ls-files 查询被追踪文件</br>
2、 git rm -r --cached hrwa/META-INF/salaryadjmgt.aop</br>
3、 git commit -m "Remove hrwa/any file  directory from version control"</br>
4、 git add .gitignore</br>
5、 git commit -m "Update .gitignore to exclude hrwa/any file"</br>
1、git rm -r --cached .</br>
2、git add .</br>
3、git commit -m 'update .gitignore'
:::

##### 47. 设置字段必输什么的前端

1. 编码字段编辑性，后编码则编码字段不可编辑，前编码则按照上下文设置编辑性
```js
let isEditable = billCodeContext.isPrecode && billCodeContext.isEditable"
```
2. 设置编码字段编辑性
```js
this.props.form.setFormItemsDisabled(form.area, {[FIELDS.CODE]: !isEditable}) 
```
3. 设置编码字段是否必输
```js
this.props.form.setFormItemsRequired(form.area, {[FIELDS.CODE]: false})   
```

##### 48. [资产包地址]( http://10.16.231.155:8080 )

##### 49. GIT提交模版说明
::: details
_feat_: <font color="珊瑚色coral"> 新功能、新特性 </font></br>
_fix_: <font color="珊瑚色coral"> 修改bug </font></br>
_perf_: <font color="珊瑚色coral"> 更改代码，以提高性能.在不影响代码内部行为的前提下，对程序性能进行优化 </font></br>
_refactor_: <font color="珊瑚色coral"> 代码重构.重构，在不影响代码内部行为、功能下的代码修改 </font></br>
_docs_: <font color="珊瑚色coral"> 文档修改 </font></br>
_style_: <font color="珊瑚色coral"> 代码格式修改,注意不是css修改,多余行删除，代码缩进等 </font></br>
_test_: <font color="珊瑚色coral"> 测试用例新增、修改 </font></br>
_build_: <font color="珊瑚色coral"> 影响项目构建或依赖项修改类如pom依赖引入等 </font></br>
_revert_: <font color="珊瑚色coral"> 恢复上一次提交 </font></br>
_ci_: <font color="cornflowerblue"> 持续集成相关文件修改,dockerFile等文件 </font></br>
_chore_: <font color="珊瑚色coral"> 其他修改,不在上述类型中的修改 </font></br>
_release_: <font color="珊瑚色coral"> 发布新版本 </font></br>
_workflow_: <font color="cornflowerblue">  工作流相关文件修改  </font>
:::

##### 50.[ [OPENAPI本地地址](**home/hotwebs/nccloud/resources/api/modules/**)]: home/hotwebs/nccloud/resources/api/modules/  

##### 51. 不控制软件安装来源

```shell
sudo spctl --master-disable
xattr -cr /Applications/PicGo.app
```

##### 52. [深浅拷贝]()
```java{1,4}
//浅拷贝
AggPaySettleVO[] shallowCopy = aggVos.clone();

// 深拷贝
AggPaySettleVO[] deepCopy = new AggPaySettleVO[aggVos.length];
for (int i = 0; i < aggVos.length; i++) {
    deepCopy[i] = (AggPaySettleVO) aggVos[i].clone();
}
```

##### 53. [NCC脚手架大全](https://nccdev.yonyou.com/article/detail/1625)

##### 55. 消息表
::: details
_sm_msg_content_: <font color="darkturquoise"> 消息发送实体表</font> </br>
_sm_msg_to_: <font color="darkturquoise"> 业务消息记录表 "业务滑息"</font></br>
_sm_msg_notice_: <font color="darkturquoise"> 通知消息记录表 "通知消息"</font></br>
_sm_msg_approve_: <font color="darkturquoise"> 审批消息记录表 "审批消息"</font></br>
_sm_msg_prealert_: <font color="darkturquoise"> 预警消息记录表 "预警滑息"</font></br>
_sm_msg_user_: <font color="darkturquoise"> 消息接收人记录表   "MESSAGE TYPE区分滑息类型Todo:业务滑息,notice:通知消,approve:审批消息,prealert:预警滑息 "</font>
:::
![image-202405211526411082](https://raw.githubusercontent.com/zbsilent/imag/main/img/2024/image-20240521152641108-20240521154702791-20240521154730029.png)

##### 56. 事物控制

::: tip

```java{10,18}
public class TestTask implements IBackgroundWorkPlugin {
    @Override
    public PreAlertObject executeTask(BgWorkingContext bgWorkingContext) throws BusinessException {
        StringBuilder errorMsg = new StringBuilder();
        int a = 0;
        try{
            a = 28 /0 ;
        }catch (Exception e){
            errorMsg = errorMsg.append(e.getMessage());
            NCLocator.getInstance().lookup(IBipTestItf.class).insertIntoPtLog_RequiresNew(e.getMessage());
            PtLogger.error(errorMsg.toString() + "保存数据库成功");

        }
        if(StringUtils.isBlank(errorMsg.toString())){
            PtLogger.info("TestTask executeTask success");
        }
        else{
            throw new BusinessException(errorMsg.toString());
        }
        return null;
    }
}
```
:::
> 这里的10行另起了事物_RequiresNew用来新建事物，整个task为一个事物，抛出异常按道理需要回滚，新启事物后就不存了

57. 代办信息变化类
::: danger
```java{1}
MessageStatesChangeContext "待办信息变化"
```
:::

58. 设置环境变量默认值

::: details

```java
package nc.vo.pub.pf;
import nc.bs.framework.common.InvocationInfo;
import nc.bs.framework.common.InvocationInfoProxy;
public class InvocationInfoCarrier {
    private InvocationInfo info = null;

    public InvocationInfoCarrier() {
        this.saveInvocationInfo();
    }

    private void saveInvocationInfo() {
        this.info = new InvocationInfo();
        this.info.setBizDateTime(InvocationInfoProxy.getInstance().getBizDateTime());
        this.info.setGroupId(InvocationInfoProxy.getInstance().getGroupId());
        this.info.setGroupNumber(InvocationInfoProxy.getInstance().getGroupNumber());
        this.info.setHyCode(InvocationInfoProxy.getInstance().getHyCode());
        this.info.setLangCode(InvocationInfoProxy.getInstance().getLangCode());
        this.info.setTimeZone(InvocationInfoProxy.getInstance().getTimeZone());
        this.info.setUserDataSource(InvocationInfoProxy.getInstance().getUserDataSource());
        this.info.setUserId(InvocationInfoProxy.getInstance().getUserId());
    }

    public void loadInvocationInfo() {
        if (this.info != null) {
            InvocationInfoProxy.getInstance().setBizDateTime(this.info.getBizDateTime());
            InvocationInfoProxy.getInstance().setGroupId(this.info.getGroupId());
            InvocationInfoProxy.getInstance().setGroupNumber(this.info.getGroupNumber());
            InvocationInfoProxy.getInstance().setHyCode(this.info.getHyCode());
            InvocationInfoProxy.getInstance().setLangCode(this.info.getLangCode());
            InvocationInfoProxy.getInstance().setTimeZone(this.info.getTimeZone());
            InvocationInfoProxy.getInstance().setUserDataSource(this.info.getUserDataSource());
            InvocationInfoProxy.getInstance().setUserId(this.info.getUserId());
        }

    }
}


```
:::

59. BeanCopier

> `BeanCopier`是`cglib`库中的一个类，它用于在Java Beans之间复制属性。这个类提供了一种高效的方式来复制源对象的属性到目标对象。
>
> 以下是一些主要的用法：
>
> 1. `create(Class source, Class target, boolean useConverter)`：创建一个新的`BeanCopier`实例。`source`参数是源对象的类，`target`参数是目标对象的类，`useConverter`参数决定是否使用转换器。如果`useConverter`为`true`，那么在复制属性时会使用转换器。
>
> 2. `copy(Object source, Object target, Converter converter)`：复制源对象的属性到目标对象。`source`参数是源对象，`target`参数是目标对象，`converter`参数是转换器。如果在创建`BeanCopier`实例时`useConverter`参数为`false`，那么这个方法会忽略`converter`参数。
>
> 在你的代码中，`BeanCopier`对象可能被用于复制`NCCMessageVO`对象的属性到`TaskVO`对象。

60. Java虚拟机可以使用的处理器数量

> `Runtime.getRuntime().availableProcessors()` 是Java中的一个方法，它返回Java虚拟机可以使用的处理器数量。这个数量可能会随着计算机系统的变化而变化，因此可能在某些情况下不是固定的。
>
> 这个方法通常用于确定并发任务的数量，或者用于配置需要并发执行的线程的数量。例如，在创建线程池时，可以使用这个方法来确定线程池的大小。

> `TxCompletionChecker` 是一个用于检查事务是否已完成的工具类。它提供了一些方法来生成事务标记（transaction mark）和检查特定的事务标记是否已完成。
>
> 以下是一些主要的方法：
>
> 1. `getInstance()`：这是一个静态方法，用于获取`TxCompletionChecker`的单例实例。
>
> 2. `generateTxMark()`：这个方法用于生成一个新的事务标记。这个标记是一个唯一的字符串，可以用来标识一个特定的事务。
>
> 3. `isTxCompleted(String txMark)`：这个方法接收一个事务标记作为参数，然后检查这个事务是否已完成。如果事务已完成，那么返回`true`，否则返回`false`。
>
> 在你的代码中，`TxCompletionChecker`可能被用于确保在执行某些操作（如发送消息）之前，相关的事务已经完成。
61. [线程池中的同步]()
> 在Java中，线程池的同步和异步主要取决于你如何使用它，而不是线程池本身的特性。如果你希望任务在线程池中同步执行，你可以使用Future的get()方法来等待任务完成。这将导致当前线程阻塞，直到任务完成并返回结果。
>
> 以下是一个示例：
>
> ```java
> ExecutorService executorService = Executors.newFixedThreadPool(10);
> 
> Callable<String> task = () -> {
>     // 模拟一些工作
>     Thread.sleep(1000);
>     return "任务结果";
> };
> 
> Future<String> future = executorService.submit(task);
> 
> try {
>     // get()方法会阻塞，直到任务完成并返回结果
>     String result = future.get();
>     System.out.println("任务完成，结果是: " + result);
> } catch (InterruptedException | ExecutionException e) {
>     e.printStackTrace();
> }
> 
> executorService.shutdown();
> ```
>
> 在这个例子中，我们创建了一个固定大小的线程池，并提交了一个任务。然后，我们使用Future的get()方法等待任务完成并获取结果。这是一个同步的操作，因为get()方法会阻塞当前线程，直到任务完成。
>
> 如果你希望任务在线程池中异步执行，你可以提交任务后不立即调用get()方法，而是继续执行其他操作。当你需要任务的结果时，再调用get()方法。如果此时任务已经完成，get()方法会立即返回结果，否则会阻塞直到任务完成。



```
```

